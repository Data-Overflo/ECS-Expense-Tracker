AWSTemplateFormatVersion: '2010-09-09'

################################################################################
#
# DESCRIPTION
#
################################################################################

################################################################################
#
# RESOURCES
#
################################################################################
Resources:
  rECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hello-server

  rECRRepoParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: ECR Repository
      Name: ecr-repo-name
      Type: String
      Value: !Ref rECRRepo

  rECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/hello-server

  rTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: hello-server
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hello-server
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/hello-server
              awslogs-region: eu-west-1
              awslogs-stream-prefix: ecs
      Family: hello-server
      NetworkMode: bridge
      Memory: 256
      RequiresCompatibilities:
        - EC2

  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: hello-server-tg
      TargetType: instance
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId: !Sub '{{resolve:ssm:vpc}}'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'

  rListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/hello/*"
      ListenerArn: !Sub '{{resolve:ssm:public-lb-listener}}'
      Priority: 10

  rECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: hello-server
      Cluster: !Sub '{{resolve:ssm:ecs-cluster-arn}}'
      DesiredCount: 2
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: hello-server
          ContainerPort: 80
          TargetGroupArn: !Ref rTargetGroup
      SchedulingStrategy: REPLICA
      HealthCheckGracePeriodSeconds: 8
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      TaskDefinition: !Ref rTaskDefinition

  rCodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /codebuild/hello-server

  rCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: hello-server-build
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      LogsConfig:
        CloudWatchLogs:
          GroupName: /codebuild/hello-server
      ServiceRole: !GetAtt rCodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE

  rCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  rCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess

  rCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: hello-server-pipeline
      RoleArn: !GetAtt rCodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: <GitHubUsername>
                Repo: <RepoName>
                Branch: <BranchName>
                OAuthToken: <GitHubOAuthToken>
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref rCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              Configuration:
                ClusterName: !Sub '{{resolve:ssm:ecs-cluster-name}}'
                ServiceName: hello-server
              InputArtifacts:
                - Name: BuildOutput

################################################################################
#
# OUTPUTS
#
################################################################################
Outputs:
  ECSTaskDefinition:
    Description: The created Taskdefinition.
    Value: !Ref rTaskDefinition
